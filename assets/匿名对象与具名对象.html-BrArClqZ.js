import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as t}from"./app-D-HOTb1n.js";const l={};function e(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="匿名对象与具名对象" tabindex="-1"><a class="header-anchor" href="#匿名对象与具名对象"><span>匿名对象与具名对象</span></a></h1><p>平时我们经常会看到一些临时变量，这些变量只定义了一次且并没有被使用，通常这些变量是被用来管理或分析某个作用域。最近突然好奇：<span style="color:red;">既然这些变量不会被使用，为什么要给这些变量定义名字？</span>故浅浅探讨了一下。</p><h2 id="_1-匿名对象与具名对象的定义" tabindex="-1"><a class="header-anchor" href="#_1-匿名对象与具名对象的定义"><span>1.匿名对象与具名对象的定义</span></a></h2><p><strong>匿名对象</strong>是指没有变量名的临时对象，通常是表达式直接产生的对象，只能在创建它的语句中使用一次，生命周期很短。</p><p><strong>具名对象</strong>是通过变量名定义并保存的对象，可以被多次引用、访问、传参等，生命周期更长，控制权更强。</p><p>下面是定义两种对象的实例：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//匿名对象</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//具名对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-使用案例" tabindex="-1"><a class="header-anchor" href="#_2-使用案例"><span>2.使用案例</span></a></h2><p>现在不妨定义一个类<em>profiler</em>，用于统计作用域的执行时间：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> profiler</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	string name;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	profiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start_time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">high_resolution_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;BEGIN Scope &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	~profiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		chrono::high_resolution_clock::time_point </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end_time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">chrono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">high_resolution_clock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		long</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> duration </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> chrono::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">duration_cast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;chrono::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">microseconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(end_time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> start_time).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;END   Scope &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; after &quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> duration </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; us&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	chrono::high_resolution_clock::time_point start_time;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在两个作用域内执行相同的操作，但是分别使用了匿名对象和具名对象：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">		profiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;作用域1内操作&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		profiler </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;作用域2内操作&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终执行的结果是：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>BEGIN Scope test1</span></span>
<span class="line"><span>END   Scope test1 after 460 us</span></span>
<span class="line"><span>作用域1内操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>BEGIN Scope test2</span></span>
<span class="line"><span>作用域2内操作</span></span>
<span class="line"><span>END   Scope test2 after 916 us</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现：<br> 匿名对象在构造完成后，离开当前语句会立即调用析构函数；<br> 具名对象会持续到离开作用域时才执行析构。</p>`,15)]))}const r=i(l,[["render",e]]),d=JSON.parse('{"path":"/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/C__%E5%BF%83%E5%BE%97/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%85%B7%E5%90%8D%E5%AF%B9%E8%B1%A1.html","title":"匿名对象与具名对象","lang":"zh-CN","frontmatter":{"title":"匿名对象与具名对象","icon":"devicon:cplusplus","date":"2025-08-02T00:00:00.000Z","order":1,"category":["C++"],"tag":["C++"],"description":"匿名对象与具名对象 平时我们经常会看到一些临时变量，这些变量只定义了一次且并没有被使用，通常这些变量是被用来管理或分析某个作用域。最近突然好奇：既然这些变量不会被使用，为什么要给这些变量定义名字？故浅浅探讨了一下。 1.匿名对象与具名对象的定义 匿名对象是指没有变量名的临时对象，通常是表达式直接产生的对象，只能在创建它的语句中使用一次，生命周期很短。 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"匿名对象与具名对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-17T06:55:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QSTX\\",\\"url\\":\\"https://www.github.com/qstx\\"}]}"],["meta",{"property":"og:url","content":"https://qstx.github.io/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/C__%E5%BF%83%E5%BE%97/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%85%B7%E5%90%8D%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"且试天下"}],["meta",{"property":"og:title","content":"匿名对象与具名对象"}],["meta",{"property":"og:description","content":"匿名对象与具名对象 平时我们经常会看到一些临时变量，这些变量只定义了一次且并没有被使用，通常这些变量是被用来管理或分析某个作用域。最近突然好奇：既然这些变量不会被使用，为什么要给这些变量定义名字？故浅浅探讨了一下。 1.匿名对象与具名对象的定义 匿名对象是指没有变量名的临时对象，通常是表达式直接产生的对象，只能在创建它的语句中使用一次，生命周期很短。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-17T06:55:31.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2025-08-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-17T06:55:31.000Z"}]]},"git":{"createdTime":1754126989000,"updatedTime":1755413731000,"contributors":[{"name":"qstx","username":"qstx","email":"2031074519@qq.com","commits":2,"url":"https://github.com/qstx"}]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"游戏开发/C++心得/匿名对象与具名对象.md","excerpt":"\\n<p>平时我们经常会看到一些临时变量，这些变量只定义了一次且并没有被使用，通常这些变量是被用来管理或分析某个作用域。最近突然好奇：<span style=\\"color: red\\">既然这些变量不会被使用，为什么要给这些变量定义名字？</span>故浅浅探讨了一下。</p>\\n<h2>1.匿名对象与具名对象的定义</h2>\\n<p><strong>匿名对象</strong>是指没有变量名的临时对象，通常是表达式直接产生的对象，只能在创建它的语句中使用一次，生命周期很短。</p>\\n<p><strong>具名对象</strong>是通过变量名定义并保存的对象，可以被多次引用、访问、传参等，生命周期更长，控制权更强。</p>","autoDesc":true}');export{r as comp,d as data};
