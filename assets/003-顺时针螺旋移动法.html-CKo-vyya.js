import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as s,d as l,n as h,g as e,r as p,o as k}from"./app-BTxQhb0-.js";const r={};function d(A,i){const a=p("VPCard");return k(),t("div",null,[i[0]||(i[0]=s('<p>C++有个令人头痛的点是会出现一些<strong>极其复杂的变量声明</strong>，比如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const**</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p)(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会让人难以判断这个变量是什么类型。最近发现一个顺时针螺旋移动法则，感觉对于C++变量类型的确定很有用。</p>',3)),l(a,h(e({title:"顺时针螺旋移动法",desc:"顺时针螺旋移动法的原文介绍和举例",logo:"https://media.geeksforgeeks.org/gfg-gg-logo.svg",link:"https://c-faq.com/decl/spiral.anderson.html",background:"rgba(253, 230, 138, 0.15)"})),null,16),i[1]||(i[1]=s(`<h2 id="一、主要步骤" tabindex="-1"><a class="header-anchor" href="#一、主要步骤"><span>一、主要步骤</span></a></h2><ol><li>重要的语法解释：</li></ol><ul><li><p>[X] or []: Array X size of... or Array undefined size of...</p></li><li><p>(type1, type2): function passing type1 and type2 returning...</p></li><li><p>*: pointer(s) to...</p></li></ul><ol start="2"><li><p>确定变量名，将其作为顺时针螺旋的起点</p></li><li><p>按照顺时针螺旋路径遍历所有修饰符</p></li><li><p>遇到括号，先遍历完括号内中的内容</p></li></ol><h2 id="二、举例解释" tabindex="-1"><a class="header-anchor" href="#二、举例解释"><span>二、举例解释</span></a></h2><h3 id="_1-char-str-10" tabindex="-1"><a class="header-anchor" href="#_1-char-str-10"><span>1.char *str[10]</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                     +-------+</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +-+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   +---+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                 +-----------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>str is an...</li><li>str is an array 10 of...</li><li>str is an array 10 of pointers to...</li><li>str is an array 10 of pointers to char</li></ul><h3 id="_2-char-fp-int-float" tabindex="-1"><a class="header-anchor" href="#_2-char-fp-int-float"><span>2.char *(*fp)( int, float *)</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                     +--------------------+</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +---+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+-+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> |^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)( </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">  ||</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +--+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   +-----+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">              |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                 +------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>fp is a...</li><li>fp is a pointer to...</li><li>fp is a pointer to a function passing an int and a pointer to float returning...</li><li>fp is a pointer to a function passing an int and a pointer to float returning a pointer to...</li><li>fp is a pointer to a function passing an int and a pointer to float returning a pointer to a char</li></ul><h3 id="_3-void-signal-int-void-fp-int-int" tabindex="-1"><a class="header-anchor" href="#_3-void-signal-int-void-fp-int-int"><span>3.void (*signal(int, void (*fp)(int)))(int)</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                      +-----------------------------+</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                      |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  +---+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                      |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  +---+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">           |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+-+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                      |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">  ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">   |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">           |^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">signal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fp)(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">    ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">    ^</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">  ||</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    +------+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    +--+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                 |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  +--------+</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">      |</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                 +----------------------------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>signal is a function passing an int and a... <ul><li>fp is a pointer to...</li><li>fp is a pointer to a function passing int returning...</li><li>fp is a pointer to a function passing int returning nothing (void)</li></ul></li><li>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning...</li><li>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to...</li><li>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to a function passing an int returning...</li><li>signal is a function passing an int and a pointer to a function passing an int returning nothing (void) returning a pointer to a function passing an int returning nothing (void)</li></ul>`,14))])}const c=n(r,[["render",d]]),y=JSON.parse('{"path":"/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/C__%E5%BF%83%E5%BE%97/003-%E9%A1%BA%E6%97%B6%E9%92%88%E8%9E%BA%E6%97%8B%E7%A7%BB%E5%8A%A8%E6%B3%95.html","title":"C++变量类型——顺时针螺旋移动法","lang":"zh-CN","frontmatter":{"title":"C++变量类型——顺时针螺旋移动法","icon":"oui:token-variable","date":"2025-09-01T00:00:00.000Z","order":3,"category":["Program"],"tag":["C++"],"description":"C++有个令人头痛的点是会出现一些极其复杂的变量声明，比如： 这会让人难以判断这个变量是什么类型。最近发现一个顺时针螺旋移动法则，感觉对于C++变量类型的确定很有用。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++变量类型——顺时针螺旋移动法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-02T00:43:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"QSTX\\",\\"url\\":\\"https://www.github.com/qstx\\"}]}"],["meta",{"property":"og:url","content":"https://qstx.github.io/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/C__%E5%BF%83%E5%BE%97/003-%E9%A1%BA%E6%97%B6%E9%92%88%E8%9E%BA%E6%97%8B%E7%A7%BB%E5%8A%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"且试天下"}],["meta",{"property":"og:title","content":"C++变量类型——顺时针螺旋移动法"}],["meta",{"property":"og:description","content":"C++有个令人头痛的点是会出现一些极其复杂的变量声明，比如： 这会让人难以判断这个变量是什么类型。最近发现一个顺时针螺旋移动法则，感觉对于C++变量类型的确定很有用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-02T00:43:10.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2025-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-02T00:43:10.000Z"}]]},"git":{"createdTime":1756773790000,"updatedTime":1756773790000,"contributors":[{"name":"qstx","username":"qstx","email":"2031074519@qq.com","commits":1,"url":"https://github.com/qstx"}]},"readingTime":{"minutes":1.68,"words":505},"filePathRelative":"游戏开发/C++心得/003-顺时针螺旋移动法.md","excerpt":"<p>C++有个令人头痛的点是会出现一些<strong>极其复杂的变量声明</strong>，比如：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"cpp\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-cpp\\"><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">string</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const**</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> f</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">void</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">*const</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> p)(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)))(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">char</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[]);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,y as data};
